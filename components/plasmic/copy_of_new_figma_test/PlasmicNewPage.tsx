// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uKzMYqiY71LewgafZ2KgTy
// Component: cmPUaz9n-cQoAt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_new_figma_test.module.css"; // plasmic-import: uKzMYqiY71LewgafZ2KgTy/projectcss
import * as sty from "./PlasmicNewPage.module.css"; // plasmic-import: cmPUaz9n-cQoAt/css

import Vector29Icon from "./icons/PlasmicIcon__Vector29"; // plasmic-import: _2HB3MMwGRp4x4f/icon
import PlayIcon from "./icons/PlasmicIcon__Play"; // plasmic-import: ZaCDbQv_aW-cwJ0/icon

export type PlasmicNewPage__VariantMembers = {};

export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: p.Flex<"div">;
  section1?: p.Flex<"div">;
  featureSectionContent?: p.Flex<"div">;
  contentTop?: p.Flex<"div">;
  badge?: p.Flex<"div">;
  small?: p.Flex<"div">;
  label?: p.Flex<"div">;
  eyebrow?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  contentMiddle?: p.Flex<"div">;
  bodyContent?: p.Flex<"div">;
  tooltip?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  ctaBlock?: p.Flex<"div">;
  ctaBlockDesktop?: p.Flex<"div">;
  ctaGroup?: p.Flex<"div">;
  _02PrimaryAltBlue?: p.Flex<"div">;
  smallPrimaryDefault?: p.Flex<"div">;
  minWidth100WidthShimTop?: p.Flex<"div">;
  textLabel?: p.Flex<"div">;
  minWidth100ShimBottom?: p.Flex<"div">;
  _05SecondaryAltBlue?: p.Flex<"div">;
  smallSecondaryDefault?: p.Flex<"div">;
  minWidth100WidthShimTop2?: p.Flex<"div">;
  textLabel2?: p.Flex<"div">;
  minWidth100ShimBottom2?: p.Flex<"div">;
  textCta?: p.Flex<"div">;
  videoLink?: p.Flex<"div">;
  _01Blue?: p.Flex<"div">;
  _02Body0201Blue01Default?: p.Flex<"div">;
  playIcon?: p.Flex<"div">;
  play?: p.Flex<"div">;
  play2?: p.Flex<"div">;
  videoLink2?: p.Flex<"div">;
  body02?: p.Flex<"div">;
  duration?: p.Flex<"div">;
  body022?: p.Flex<"div">;
  overlay34Tall?: p.Flex<"div">;
  mediaPlaceholderOverlay?: p.Flex<"div">;
  imagePlaceholder?: p.Flex<"div">;
  exportThisFrameAsJpg?: p.Flex<"div">;
  rectangle136?: p.Flex<"div">;
  widgetPlaceholder?: p.Flex<"div">;
  card?: p.Flex<"div">;
  titleCentered?: p.Flex<"div">;
  titleCentered2?: p.Flex<"div">;
  left?: p.Flex<"div">;
  right?: p.Flex<"div">;
};

export interface DefaultNewPageProps {
  dataFetches: PlasmicNewPage__Fetches;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  dataFetches?: PlasmicNewPage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"section1"}
            data-plasmic-override={overrides.section1}
            className={classNames(defaultcss.all, sty.section1)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"featureSectionContent"}
              data-plasmic-override={overrides.featureSectionContent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.featureSectionContent)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"contentTop"}
                data-plasmic-override={overrides.contentTop}
                hasGap={true}
                className={classNames(defaultcss.all, sty.contentTop)}
              >
                <div
                  data-plasmic-name={"badge"}
                  data-plasmic-override={overrides.badge}
                  className={classNames(defaultcss.all, sty.badge)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"small"}
                    data-plasmic-override={overrides.small}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.small)}
                  >
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.label
                      )}
                    >
                      {"NEW"}
                    </div>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"eyebrow"}
                  data-plasmic-override={overrides.eyebrow}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.eyebrow
                  )}
                >
                  {"EYEBROW PLACEHOLDER"}
                </div>

                <div
                  data-plasmic-name={"headline"}
                  data-plasmic-override={overrides.headline}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.headline
                  )}
                >
                  {"Headline 1 bold example"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"contentMiddle"}
                data-plasmic-override={overrides.contentMiddle}
                hasGap={true}
                className={classNames(defaultcss.all, sty.contentMiddle)}
              >
                <div
                  data-plasmic-name={"bodyContent"}
                  data-plasmic-override={overrides.bodyContent}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.bodyContent
                  )}
                >
                  {
                    "Cras ullamcorper turpis ac rhoncus placerat. Fusce venenatis mauris et lorem. Cras ullamcorper turpis ac rhoncus placerat. Fusce venenatis mauris et."
                  }
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"tooltip"}
                  data-plasmic-override={overrides.tooltip}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.tooltip)}
                >
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox
                    )}
                  >
                    {"Lorem ipsum dolar"}
                  </div>

                  <Vector29Icon
                    className={classNames(defaultcss.all, sty.svg__hf7SK)}
                    role={"img"}
                  />
                </p.Stack>
              </p.Stack>

              <div
                data-plasmic-name={"ctaBlock"}
                data-plasmic-override={overrides.ctaBlock}
                className={classNames(defaultcss.all, sty.ctaBlock)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"ctaBlockDesktop"}
                  data-plasmic-override={overrides.ctaBlockDesktop}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.ctaBlockDesktop)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ctaGroup"}
                    data-plasmic-override={overrides.ctaGroup}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.ctaGroup)}
                  >
                    <div
                      data-plasmic-name={"_02PrimaryAltBlue"}
                      data-plasmic-override={overrides._02PrimaryAltBlue}
                      className={classNames(
                        defaultcss.all,
                        sty._02PrimaryAltBlue
                      )}
                    >
                      <div
                        data-plasmic-name={"smallPrimaryDefault"}
                        data-plasmic-override={overrides.smallPrimaryDefault}
                        className={classNames(
                          defaultcss.all,
                          sty.smallPrimaryDefault
                        )}
                      >
                        <div
                          data-plasmic-name={"minWidth100WidthShimTop"}
                          data-plasmic-override={
                            overrides.minWidth100WidthShimTop
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.minWidth100WidthShimTop
                          )}
                        />

                        <div
                          data-plasmic-name={"textLabel"}
                          data-plasmic-override={overrides.textLabel}
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.textLabel
                          )}
                        >
                          {"Lorem ipsum"}
                        </div>

                        <div
                          data-plasmic-name={"minWidth100ShimBottom"}
                          data-plasmic-override={
                            overrides.minWidth100ShimBottom
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.minWidth100ShimBottom
                          )}
                        />
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"_05SecondaryAltBlue"}
                      data-plasmic-override={overrides._05SecondaryAltBlue}
                      className={classNames(
                        defaultcss.all,
                        sty._05SecondaryAltBlue
                      )}
                    >
                      <div
                        data-plasmic-name={"smallSecondaryDefault"}
                        data-plasmic-override={overrides.smallSecondaryDefault}
                        className={classNames(
                          defaultcss.all,
                          sty.smallSecondaryDefault
                        )}
                      >
                        <div
                          data-plasmic-name={"minWidth100WidthShimTop2"}
                          data-plasmic-override={
                            overrides.minWidth100WidthShimTop2
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.minWidth100WidthShimTop2
                          )}
                        />

                        <div
                          data-plasmic-name={"textLabel2"}
                          data-plasmic-override={overrides.textLabel2}
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.textLabel2
                          )}
                        >
                          {"Lorem ipsum"}
                        </div>

                        <div
                          data-plasmic-name={"minWidth100ShimBottom2"}
                          data-plasmic-override={
                            overrides.minWidth100ShimBottom2
                          }
                          className={classNames(
                            defaultcss.all,
                            sty.minWidth100ShimBottom2
                          )}
                        />
                      </div>
                    </div>

                    {false ? (
                      <div
                        data-plasmic-name={"textCta"}
                        data-plasmic-override={overrides.textCta}
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.textCta
                        )}
                      >
                        {"Or call xxx-xx-xxxx"}
                      </div>
                    ) : null}
                  </p.Stack>

                  <div
                    data-plasmic-name={"videoLink"}
                    data-plasmic-override={overrides.videoLink}
                    className={classNames(defaultcss.all, sty.videoLink)}
                  >
                    <div
                      data-plasmic-name={"_01Blue"}
                      data-plasmic-override={overrides._01Blue}
                      className={classNames(defaultcss.all, sty._01Blue)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"_02Body0201Blue01Default"}
                        data-plasmic-override={
                          overrides._02Body0201Blue01Default
                        }
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty._02Body0201Blue01Default
                        )}
                      >
                        <div
                          data-plasmic-name={"playIcon"}
                          data-plasmic-override={overrides.playIcon}
                          className={classNames(defaultcss.all, sty.playIcon)}
                        >
                          <div
                            data-plasmic-name={"play"}
                            data-plasmic-override={overrides.play}
                            className={classNames(defaultcss.all, sty.play)}
                          >
                            <div
                              data-plasmic-name={"play2"}
                              data-plasmic-override={overrides.play2}
                              className={classNames(defaultcss.all, sty.play2)}
                            >
                              <PlayIcon
                                className={classNames(
                                  defaultcss.all,
                                  sty.svg__j7Ioz
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"videoLink2"}
                          data-plasmic-override={overrides.videoLink2}
                          hasGap={true}
                          className={classNames(defaultcss.all, sty.videoLink2)}
                        >
                          <div
                            data-plasmic-name={"body02"}
                            data-plasmic-override={overrides.body02}
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.body02
                            )}
                          >
                            {"Lorem ipsum dolar"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"duration"}
                          data-plasmic-override={overrides.duration}
                          hasGap={true}
                          className={classNames(defaultcss.all, sty.duration)}
                        >
                          <div
                            data-plasmic-name={"body022"}
                            data-plasmic-override={overrides.body022}
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.body022
                            )}
                          >
                            {"(59s)"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>
                  </div>
                </p.Stack>
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"overlay34Tall"}
              data-plasmic-override={overrides.overlay34Tall}
              className={classNames(defaultcss.all, sty.overlay34Tall)}
            >
              <div
                data-plasmic-name={"mediaPlaceholderOverlay"}
                data-plasmic-override={overrides.mediaPlaceholderOverlay}
                className={classNames(
                  defaultcss.all,
                  sty.mediaPlaceholderOverlay
                )}
              >
                <div
                  data-plasmic-name={"imagePlaceholder"}
                  data-plasmic-override={overrides.imagePlaceholder}
                  className={classNames(defaultcss.all, sty.imagePlaceholder)}
                >
                  <div
                    data-plasmic-name={"exportThisFrameAsJpg"}
                    data-plasmic-override={overrides.exportThisFrameAsJpg}
                    className={classNames(
                      defaultcss.all,
                      sty.exportThisFrameAsJpg
                    )}
                  >
                    <div
                      data-plasmic-name={"rectangle136"}
                      data-plasmic-override={overrides.rectangle136}
                      className={classNames(defaultcss.all, sty.rectangle136)}
                    />
                  </div>
                </div>
              </div>

              {false ? (
                <div
                  data-plasmic-name={"widgetPlaceholder"}
                  data-plasmic-override={overrides.widgetPlaceholder}
                  className={classNames(defaultcss.all, sty.widgetPlaceholder)}
                >
                  <div
                    data-plasmic-name={"card"}
                    data-plasmic-override={overrides.card}
                    className={classNames(defaultcss.all, sty.card)}
                  />

                  <div
                    data-plasmic-name={"titleCentered"}
                    data-plasmic-override={overrides.titleCentered}
                    className={classNames(defaultcss.all, sty.titleCentered)}
                  >
                    <div
                      data-plasmic-name={"titleCentered2"}
                      data-plasmic-override={overrides.titleCentered2}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.titleCentered2
                      )}
                    >
                      {"widget zone"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"left"}
                    data-plasmic-override={overrides.left}
                    className={classNames(defaultcss.all, sty.left)}
                  />

                  {false ? (
                    <div
                      data-plasmic-name={"right"}
                      data-plasmic-override={overrides.right}
                      className={classNames(defaultcss.all, sty.right)}
                    />
                  ) : null}
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section1",
    "featureSectionContent",
    "contentTop",
    "badge",
    "small",
    "label",
    "eyebrow",
    "headline",
    "contentMiddle",
    "bodyContent",
    "tooltip",
    "freeBox",
    "ctaBlock",
    "ctaBlockDesktop",
    "ctaGroup",
    "_02PrimaryAltBlue",
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom",
    "_05SecondaryAltBlue",
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2",
    "textCta",
    "videoLink",
    "_01Blue",
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022",
    "overlay34Tall",
    "mediaPlaceholderOverlay",
    "imagePlaceholder",
    "exportThisFrameAsJpg",
    "rectangle136",
    "widgetPlaceholder",
    "card",
    "titleCentered",
    "titleCentered2",
    "left",
    "right"
  ],
  section1: [
    "section1",
    "featureSectionContent",
    "contentTop",
    "badge",
    "small",
    "label",
    "eyebrow",
    "headline",
    "contentMiddle",
    "bodyContent",
    "tooltip",
    "freeBox",
    "ctaBlock",
    "ctaBlockDesktop",
    "ctaGroup",
    "_02PrimaryAltBlue",
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom",
    "_05SecondaryAltBlue",
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2",
    "textCta",
    "videoLink",
    "_01Blue",
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022",
    "overlay34Tall",
    "mediaPlaceholderOverlay",
    "imagePlaceholder",
    "exportThisFrameAsJpg",
    "rectangle136",
    "widgetPlaceholder",
    "card",
    "titleCentered",
    "titleCentered2",
    "left",
    "right"
  ],
  featureSectionContent: [
    "featureSectionContent",
    "contentTop",
    "badge",
    "small",
    "label",
    "eyebrow",
    "headline",
    "contentMiddle",
    "bodyContent",
    "tooltip",
    "freeBox",
    "ctaBlock",
    "ctaBlockDesktop",
    "ctaGroup",
    "_02PrimaryAltBlue",
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom",
    "_05SecondaryAltBlue",
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2",
    "textCta",
    "videoLink",
    "_01Blue",
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022"
  ],
  contentTop: ["contentTop", "badge", "small", "label", "eyebrow", "headline"],
  badge: ["badge", "small", "label"],
  small: ["small", "label"],
  label: ["label"],
  eyebrow: ["eyebrow"],
  headline: ["headline"],
  contentMiddle: ["contentMiddle", "bodyContent", "tooltip", "freeBox"],
  bodyContent: ["bodyContent"],
  tooltip: ["tooltip", "freeBox"],
  freeBox: ["freeBox"],
  ctaBlock: [
    "ctaBlock",
    "ctaBlockDesktop",
    "ctaGroup",
    "_02PrimaryAltBlue",
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom",
    "_05SecondaryAltBlue",
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2",
    "textCta",
    "videoLink",
    "_01Blue",
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022"
  ],
  ctaBlockDesktop: [
    "ctaBlockDesktop",
    "ctaGroup",
    "_02PrimaryAltBlue",
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom",
    "_05SecondaryAltBlue",
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2",
    "textCta",
    "videoLink",
    "_01Blue",
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022"
  ],
  ctaGroup: [
    "ctaGroup",
    "_02PrimaryAltBlue",
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom",
    "_05SecondaryAltBlue",
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2",
    "textCta"
  ],
  _02PrimaryAltBlue: [
    "_02PrimaryAltBlue",
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom"
  ],
  smallPrimaryDefault: [
    "smallPrimaryDefault",
    "minWidth100WidthShimTop",
    "textLabel",
    "minWidth100ShimBottom"
  ],
  minWidth100WidthShimTop: ["minWidth100WidthShimTop"],
  textLabel: ["textLabel"],
  minWidth100ShimBottom: ["minWidth100ShimBottom"],
  _05SecondaryAltBlue: [
    "_05SecondaryAltBlue",
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2"
  ],
  smallSecondaryDefault: [
    "smallSecondaryDefault",
    "minWidth100WidthShimTop2",
    "textLabel2",
    "minWidth100ShimBottom2"
  ],
  minWidth100WidthShimTop2: ["minWidth100WidthShimTop2"],
  textLabel2: ["textLabel2"],
  minWidth100ShimBottom2: ["minWidth100ShimBottom2"],
  textCta: ["textCta"],
  videoLink: [
    "videoLink",
    "_01Blue",
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022"
  ],
  _01Blue: [
    "_01Blue",
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022"
  ],
  _02Body0201Blue01Default: [
    "_02Body0201Blue01Default",
    "playIcon",
    "play",
    "play2",
    "videoLink2",
    "body02",
    "duration",
    "body022"
  ],
  playIcon: ["playIcon", "play", "play2"],
  play: ["play", "play2"],
  play2: ["play2"],
  videoLink2: ["videoLink2", "body02"],
  body02: ["body02"],
  duration: ["duration", "body022"],
  body022: ["body022"],
  overlay34Tall: [
    "overlay34Tall",
    "mediaPlaceholderOverlay",
    "imagePlaceholder",
    "exportThisFrameAsJpg",
    "rectangle136",
    "widgetPlaceholder",
    "card",
    "titleCentered",
    "titleCentered2",
    "left",
    "right"
  ],
  mediaPlaceholderOverlay: [
    "mediaPlaceholderOverlay",
    "imagePlaceholder",
    "exportThisFrameAsJpg",
    "rectangle136"
  ],
  imagePlaceholder: [
    "imagePlaceholder",
    "exportThisFrameAsJpg",
    "rectangle136"
  ],
  exportThisFrameAsJpg: ["exportThisFrameAsJpg", "rectangle136"],
  rectangle136: ["rectangle136"],
  widgetPlaceholder: [
    "widgetPlaceholder",
    "card",
    "titleCentered",
    "titleCentered2",
    "left",
    "right"
  ],
  card: ["card"],
  titleCentered: ["titleCentered", "titleCentered2"],
  titleCentered2: ["titleCentered2"],
  left: ["left"],
  right: ["right"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section1: "div";
  featureSectionContent: "div";
  contentTop: "div";
  badge: "div";
  small: "div";
  label: "div";
  eyebrow: "div";
  headline: "div";
  contentMiddle: "div";
  bodyContent: "div";
  tooltip: "div";
  freeBox: "div";
  ctaBlock: "div";
  ctaBlockDesktop: "div";
  ctaGroup: "div";
  _02PrimaryAltBlue: "div";
  smallPrimaryDefault: "div";
  minWidth100WidthShimTop: "div";
  textLabel: "div";
  minWidth100ShimBottom: "div";
  _05SecondaryAltBlue: "div";
  smallSecondaryDefault: "div";
  minWidth100WidthShimTop2: "div";
  textLabel2: "div";
  minWidth100ShimBottom2: "div";
  textCta: "div";
  videoLink: "div";
  _01Blue: "div";
  _02Body0201Blue01Default: "div";
  playIcon: "div";
  play: "div";
  play2: "div";
  videoLink2: "div";
  body02: "div";
  duration: "div";
  body022: "div";
  overlay34Tall: "div";
  mediaPlaceholderOverlay: "div";
  imagePlaceholder: "div";
  exportThisFrameAsJpg: "div";
  rectangle136: "div";
  widgetPlaceholder: "div";
  card: "div";
  titleCentered: "div";
  titleCentered2: "div";
  left: "div";
  right: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNewPage__Fetches;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewPage__ArgProps,
      internalVariantPropNames: PlasmicNewPage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section1: makeNodeComponent("section1"),
    featureSectionContent: makeNodeComponent("featureSectionContent"),
    contentTop: makeNodeComponent("contentTop"),
    badge: makeNodeComponent("badge"),
    small: makeNodeComponent("small"),
    label: makeNodeComponent("label"),
    eyebrow: makeNodeComponent("eyebrow"),
    headline: makeNodeComponent("headline"),
    contentMiddle: makeNodeComponent("contentMiddle"),
    bodyContent: makeNodeComponent("bodyContent"),
    tooltip: makeNodeComponent("tooltip"),
    freeBox: makeNodeComponent("freeBox"),
    ctaBlock: makeNodeComponent("ctaBlock"),
    ctaBlockDesktop: makeNodeComponent("ctaBlockDesktop"),
    ctaGroup: makeNodeComponent("ctaGroup"),
    _02PrimaryAltBlue: makeNodeComponent("_02PrimaryAltBlue"),
    smallPrimaryDefault: makeNodeComponent("smallPrimaryDefault"),
    minWidth100WidthShimTop: makeNodeComponent("minWidth100WidthShimTop"),
    textLabel: makeNodeComponent("textLabel"),
    minWidth100ShimBottom: makeNodeComponent("minWidth100ShimBottom"),
    _05SecondaryAltBlue: makeNodeComponent("_05SecondaryAltBlue"),
    smallSecondaryDefault: makeNodeComponent("smallSecondaryDefault"),
    minWidth100WidthShimTop2: makeNodeComponent("minWidth100WidthShimTop2"),
    textLabel2: makeNodeComponent("textLabel2"),
    minWidth100ShimBottom2: makeNodeComponent("minWidth100ShimBottom2"),
    textCta: makeNodeComponent("textCta"),
    videoLink: makeNodeComponent("videoLink"),
    _01Blue: makeNodeComponent("_01Blue"),
    _02Body0201Blue01Default: makeNodeComponent("_02Body0201Blue01Default"),
    playIcon: makeNodeComponent("playIcon"),
    play: makeNodeComponent("play"),
    play2: makeNodeComponent("play2"),
    videoLink2: makeNodeComponent("videoLink2"),
    body02: makeNodeComponent("body02"),
    duration: makeNodeComponent("duration"),
    body022: makeNodeComponent("body022"),
    overlay34Tall: makeNodeComponent("overlay34Tall"),
    mediaPlaceholderOverlay: makeNodeComponent("mediaPlaceholderOverlay"),
    imagePlaceholder: makeNodeComponent("imagePlaceholder"),
    exportThisFrameAsJpg: makeNodeComponent("exportThisFrameAsJpg"),
    rectangle136: makeNodeComponent("rectangle136"),
    widgetPlaceholder: makeNodeComponent("widgetPlaceholder"),
    card: makeNodeComponent("card"),
    titleCentered: makeNodeComponent("titleCentered"),
    titleCentered2: makeNodeComponent("titleCentered2"),
    left: makeNodeComponent("left"),
    right: makeNodeComponent("right"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
