// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uKzMYqiY71LewgafZ2KgTy
// Component: YsCH9Ogefdoh_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import RwPriceCard from "../../RwPriceCard"; // plasmic-import: n4OEUJN2avMkS/component
import MobileControlleft from "../../MobileControlleft"; // plasmic-import: GKCLPs_yrNIqA/component
import MobileControlright from "../../MobileControlright"; // plasmic-import: pj7m_aQEHexV2/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 9DfnOHOEtDsgP39/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_new_figma_test.module.css"; // plasmic-import: uKzMYqiY71LewgafZ2KgTy/projectcss
import * as sty from "./PlasmicPricingTest.module.css"; // plasmic-import: YsCH9Ogefdoh_/css

export type PlasmicPricingTest__VariantMembers = {};

export type PlasmicPricingTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicPricingTest__VariantsArgs;
export const PlasmicPricingTest__VariantProps = new Array<VariantPropType>();

export type PlasmicPricingTest__ArgsType = {};
type ArgPropType = keyof PlasmicPricingTest__ArgsType;
export const PlasmicPricingTest__ArgProps = new Array<ArgPropType>();

export type PlasmicPricingTest__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  controller?: p.Flex<"div">;
  left?: p.Flex<"div">;
  mobileControlleft?: p.Flex<typeof MobileControlleft>;
  right2?: p.Flex<"div">;
  right?: p.Flex<typeof MobileControlright>;
};

export interface DefaultPricingTestProps {
  dataFetches: PlasmicPricingTest__Fetches;
}

function PlasmicPricingTest__RenderFunc(props: {
  variants: PlasmicPricingTest__VariantsArgs;
  args: PlasmicPricingTest__ArgsType;
  overrides: PlasmicPricingTest__OverridesType;
  dataFetches?: PlasmicPricingTest__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox)}
        >
          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard__hyxTv)}
          />

          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard__lx3KS)}
            duration={"For the first 3 months then $40 /mo*"}
            slot={"Automate your work to stay on top of business."}
            wholePrice={"20"}
          >
            {"Essentials"}
          </RwPriceCard>

          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard__fmHay)}
            duration={"For the first 3 months then $70 /mo*"}
            popular={"popular" as const}
            slot={
              "Manage projects, billing, and contractors, all in one place."
            }
            wholePrice={"35 "}
          >
            {"Plus"}
          </RwPriceCard>

          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard__klVeS)}
            duration={"For the first 3 months then $150 /mo*"}
            slot={"Work smarter with the most comprehensive tools available."}
            wholePrice={"75 "}
          >
            {"Advanced"}
          </RwPriceCard>
        </p.Stack>

        {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"controller"}
            data-plasmic-override={overrides.controller}
            hasGap={true}
            className={classNames(defaultcss.all, sty.controller)}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <div
                data-plasmic-name={"left"}
                data-plasmic-override={overrides.left}
                className={classNames(defaultcss.all, sty.left)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <MobileControlleft
                    data-plasmic-name={"mobileControlleft"}
                    data-plasmic-override={overrides.mobileControlleft}
                    className={classNames(
                      "__wab_instance",
                      sty.mobileControlleft
                    )}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <div
                data-plasmic-name={"right2"}
                data-plasmic-override={overrides.right2}
                className={classNames(defaultcss.all, sty.right2)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <MobileControlright
                    data-plasmic-name={"right"}
                    data-plasmic-override={overrides.right}
                    className={classNames("__wab_instance", sty.right)}
                  />
                ) : null}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "controller",
    "left",
    "mobileControlleft",
    "right2",
    "right"
  ],
  freeBox: ["freeBox"],
  controller: ["controller", "left", "mobileControlleft", "right2", "right"],
  left: ["left", "mobileControlleft"],
  mobileControlleft: ["mobileControlleft"],
  right2: ["right2", "right"],
  right: ["right"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  controller: "div";
  left: "div";
  mobileControlleft: typeof MobileControlleft;
  right2: "div";
  right: typeof MobileControlright;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingTest__VariantsArgs;
    args?: PlasmicPricingTest__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPricingTest__Fetches;
  } & Omit<PlasmicPricingTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPricingTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingTest__ArgProps,
      internalVariantPropNames: PlasmicPricingTest__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPricingTest__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingTest";
  } else {
    func.displayName = `PlasmicPricingTest.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingTest = Object.assign(
  // Top-level PlasmicPricingTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    controller: makeNodeComponent("controller"),
    left: makeNodeComponent("left"),
    mobileControlleft: makeNodeComponent("mobileControlleft"),
    right2: makeNodeComponent("right2"),
    right: makeNodeComponent("right"),

    // Metadata about props expected for PlasmicPricingTest
    internalVariantProps: PlasmicPricingTest__VariantProps,
    internalArgProps: PlasmicPricingTest__ArgProps
  }
);

export default PlasmicPricingTest;
/* prettier-ignore-end */
